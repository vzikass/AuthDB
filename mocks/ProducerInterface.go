// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// ProducerInterface is an autogenerated mock type for the ProducerInterface type
type ProducerInterface struct {
	mock.Mock
}

// SendMessage provides a mock function with given fields: msg
func (_m *ProducerInterface) SendMessage(msg *sarama.ProducerMessage) (int32, int64, error) {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 int32
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*sarama.ProducerMessage) (int32, int64, error)); ok {
		return rf(msg)
	}
	if rf, ok := ret.Get(0).(func(*sarama.ProducerMessage) int32); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(*sarama.ProducerMessage) int64); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(*sarama.ProducerMessage) error); ok {
		r2 = rf(msg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewProducerInterface creates a new instance of ProducerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProducerInterface {
	mock := &ProducerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
