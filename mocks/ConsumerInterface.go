// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerInterface is an autogenerated mock type for the ConsumerInterface type
type ConsumerInterface struct {
	mock.Mock
}

// ConsumePartition provides a mock function with given fields: topic, partition, offset
func (_m *ConsumerInterface) ConsumePartition(topic string, partition int32, offset int64) (sarama.PartitionConsumer, error) {
	ret := _m.Called(topic, partition, offset)

	if len(ret) == 0 {
		panic("no return value specified for ConsumePartition")
	}

	var r0 sarama.PartitionConsumer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int32, int64) (sarama.PartitionConsumer, error)); ok {
		return rf(topic, partition, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int32, int64) sarama.PartitionConsumer); ok {
		r0 = rf(topic, partition, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sarama.PartitionConsumer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int32, int64) error); ok {
		r1 = rf(topic, partition, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsumerInterface creates a new instance of ConsumerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerInterface {
	mock := &ConsumerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
