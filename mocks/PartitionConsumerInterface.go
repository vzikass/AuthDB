// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// PartitionConsumerInterface is an autogenerated mock type for the PartitionConsumerInterface type
type PartitionConsumerInterface struct {
	mock.Mock
}

// AsyncClose provides a mock function with given fields:
func (_m *PartitionConsumerInterface) AsyncClose() {
	_m.Called()
}

// Close provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Errors provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Errors() <-chan *sarama.ConsumerError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 <-chan *sarama.ConsumerError
	if rf, ok := ret.Get(0).(func() <-chan *sarama.ConsumerError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *sarama.ConsumerError)
		}
	}

	return r0
}

// HighWaterMarkOffset provides a mock function with given fields:
func (_m *PartitionConsumerInterface) HighWaterMarkOffset() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HighWaterMarkOffset")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// InitialOffset provides a mock function with given fields:
func (_m *PartitionConsumerInterface) InitialOffset() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitialOffset")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IsPaused provides a mock function with given fields:
func (_m *PartitionConsumerInterface) IsPaused() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsPaused")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Lag provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Lag() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lag")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Messages provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Messages() <-chan *sarama.ConsumerMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 <-chan *sarama.ConsumerMessage
	if rf, ok := ret.Get(0).(func() <-chan *sarama.ConsumerMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *sarama.ConsumerMessage)
		}
	}

	return r0
}

// Partition provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Partition() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Partition")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Pause provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Pause() {
	_m.Called()
}

// Resume provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Resume() {
	_m.Called()
}

// Topic provides a mock function with given fields:
func (_m *PartitionConsumerInterface) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewPartitionConsumerInterface creates a new instance of PartitionConsumerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPartitionConsumerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PartitionConsumerInterface {
	mock := &PartitionConsumerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
