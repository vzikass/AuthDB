version: '3.8'

services:
  maindb:
    image: postgres:latest
    container_name: maindb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 193566
      POSTGRES_DB: AuthDB
    volumes:
      - maindb_data:/var/lib/postgresql/data
      - ./migrations/20240807182800_createmaindb.sql:/docker-entrypoint-initdb.d/20240807182800_createmaindb.sql
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    restart: unless-stopped
    networks:
      - mynetwork

  web:
    image: myapp
    container_name: web
    build: .
    ports:
      - "4444:4444"
    environment:
      DATABASE_URL: postgres://postgres:193566@maindb:5432/AuthDB
      TESTDB_URL: postgres://postgres:193566@testdb:5432/testdb
    depends_on:
      maindb: 
        condition: service_healthy
      testdb:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mynetwork

  testdb:
    image: postgres:latest
    container_name: testdb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 193566
      POSTGRES_DB: testdb
    volumes:
      - testdb_data:/var/lib/postgresql/data
      - ./migrations/20240807194809_createtestdb.sql:/docker-entrypoint-initdb.d/20240807194809_createtestdb.sql
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 6
      start_period: 25s
      timeout: 5s
    restart: unless-stopped
    networks:
      - mynetwork
      
  test:
    container_name: test
    image: test
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      testdb:
        condition: service_healthy
    environment:
      TESTDB_URL: postgres://postgres:193566@testdb:5432/testdb
    # commands to keep the test container running 
    # command: ["sh", "-c", "tail -f /dev/null"] 
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  maindb_data:
  testdb_data: