version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mynetwork
      
  kafka-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-1 
    container_name: kafka-1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
    ports:
      - "9092:9092"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      retries: 10
    networks:
      - mynetwork

  kafka-2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-2
    container_name: kafka-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
    ports:
      - "9093:9093"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9093"]
      interval: 10s
      retries: 10
    networks:
      - mynetwork

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka-1
      - kafka-2
      - zookeeper
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka-1:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-1:9092 --create --if-not-exists --topic authdb-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-1:9092 --list

      # Keep the container alive
      tail -f /dev/null
      "
    networks:
      - mynetwork

  maindb:
    image: postgres:latest
    container_name: maindb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 193566
      POSTGRES_DB: AuthDB
    volumes:
      - ./migrations/20240807182800_createmaindb.sql:/docker-entrypoint-initdb.d/20240807182800_createmaindb.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    restart: unless-stopped
    env_file:
      - ./db.env
    networks:
      - mynetwork

  web:
    image: myapp
    container_name: web
    build: .
    ports:
      - "4444:4444"
    environment:
      DATABASE_URL: postgres://postgres:193566@maindb:5432/AuthDB
      TESTDB_URL: postgres://postgres:193566@testdb:5432/testdb
      KAFKA_BROKERS: kafka-1:9092,kafka-2:9093
    depends_on:
      maindb: 
        condition: service_healthy
      testdb:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    restart: unless-stopped
    env_file:
      - ./db.env
      - ./jwt.env
    networks:
      - mynetwork

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - web
    networks:
      - mynetwork

  testdb:
    image: postgres:latest
    container_name: testdb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 193566
      POSTGRES_DB: testdb
    volumes:
      - ./migrations/20240807194809_createtestdb.sql:/docker-entrypoint-initdb.d/20240807194809_createtestdb.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 6
      start_period: 30s
      timeout: 5s
    restart: unless-stopped
    networks:
      - mynetwork
      
  test:
    container_name: test
    image: test
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    depends_on:
      testdb:
        condition: service_healthy
      maindb:
        condition: service_healthy
    # commands to keep the test container running 
    command: ["sh", "-c", "tail -f /dev/null"] 
    env_file:
      - ./db.env
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  maindb_data:
  testdb_data: